/**
 * Game Scanner Service
 * Scans for installed games and fetches their covers from SteamGridDB
 */

import { Ludusavi } from './ludusavi'
import axios from 'axios'

// SteamGridDB API Configuration
// Get your free API key at: https://www.steamgriddb.com/profile/preferences/api
const STEAMGRIDDB_API_KEY = '36e16a74d0bebdce424abc69d7a304c8' // Free tier key
const STEAMGRIDDB_BASE_URL = 'https://www.steamgriddb.com/api/v2'

export interface ScannedGame {
  name: string          // Nome para exibi√ß√£o (pode ser ID ou nome amig√°vel)
  displayName?: string  // Nome amig√°vel obtido da API
  gameId: string        // ID original do Ludusavi (Steam ID, GOG ID ou nome)
  platform?: 'steam' | 'gog' | 'epic' | 'custom' | 'unknown'
  coverUrl?: string
  foundSaves: boolean
  savesCount: number
}

export class GameScanner {
  private static currentScanProcess: any = null

  /**
   * Update all existing games with new icons instead of covers
   */
  public static async updateAllGamesWithIcons(backupManager: any): Promise<void> {
    console.log('üîÑ Iniciando atualiza√ß√£o de √≠cones para todos os jogos...');
    
    // Get all games from backup manager
    const games = backupManager.getGames();
    console.log(`üéÆ Encontrados ${games.length} jogos para atualizar`);
    
    for (const game of games) {
      try {
        console.log(`üîÑ Atualizando jogo: ${game.name}`);
        
        // Only update games that have Steam IDs (numeric)
        if (game.gameId && /^\d+$/.test(game.gameId)) {
          console.log(`üîç Buscando novo √≠cone para Steam ID: ${game.gameId}`);
          
          // Get new icon URL
          const gameInfo = await this.getGameInfo(game.gameId);
          
          if (gameInfo.coverUrl && gameInfo.coverUrl !== game.coverUrl) {
            console.log(`‚úÖ Novo √≠cone encontrado para ${game.name}`);
            
            // Update game in backup manager
            const updatedGames = backupManager.getGames();
            const gameToUpdate = updatedGames.find((g: any) => g.id === game.id);
            if (gameToUpdate) {
              gameToUpdate.coverUrl = gameInfo.coverUrl;
              gameToUpdate.updatedAt = new Date();
              backupManager.store.set('games', updatedGames);
            }
          } else {
            console.log(`‚ÑπÔ∏è Nenhuma atualiza√ß√£o necess√°ria para ${game.name}`);
          }
        } else {
          console.log(`‚è≠Ô∏è Pulando jogo sem Steam ID: ${game.name}`);
        }
      } catch (error) {
        console.error(`‚ùå Erro ao atualizar jogo ${game.name}:`, error);
      }
    }
    
    console.log('‚úÖ Atualiza√ß√£o de √≠cones conclu√≠da');
  }

  /**
   * Scan for installed games using Ludusavi's backup preview command
   */
  public static async scanInstalledGames(
    onProgress?: (progress: number) => void
  ): Promise<ScannedGame[]> {
    try {
      console.log('üîç Iniciando escaneamento de jogos instalados...')
      onProgress?.(10)
      
      // Use Ludusavi's backup --preview to scan all games at once
      console.log('üìû Chamando Ludusavi.getAllGamesPreview()...')
      const backupPreview = await Ludusavi.getAllGamesPreview((progress) => {
        // Progresso do Ludusavi: 10% -> 90%
        onProgress?.(progress)
      })
      console.log('üì• Resposta recebida do Ludusavi')
      onProgress?.(90)
      
      if (!backupPreview) {
        console.log('‚ö†Ô∏è Nenhum resultado do Ludusavi')
        return []
      }
      
      if (!backupPreview.games) {
        console.log('‚ö†Ô∏è Nenhum jogo na resposta do Ludusavi')
        console.log('üìä Overall stats:', backupPreview.overall)
        return []
      }
      
      const gameIds = Object.keys(backupPreview.games)
      console.log(`üì¶ Ludusavi encontrou ${gameIds.length} jogos com saves`)
      console.log('üéÆ Lista de IDs:', gameIds.slice(0, 10).join(', '), gameIds.length > 10 ? '...' : '')
      onProgress?.(92)
      
      const scannedGames: ScannedGame[] = []

      // Limit to 150 games to avoid UI overload (increased from 50)
      const gamesToProcess = gameIds.slice(0, 150)
      console.log(`üéÆ Processando ${gamesToProcess.length} jogos...`)

      // Process each game
      let processed = 0
      const totalGames = gamesToProcess.length
      
      for (const gameId of gamesToProcess) {
        try {
          const gameData = backupPreview.games[gameId]
          const fileCount = Object.keys(gameData.files || {}).length
          
          if (fileCount === 0) {
            console.log(`‚è≠Ô∏è Pulando ${gameId} (sem arquivos)`)
            continue
          }
          
          processed++
          // Progress from 92% to 99%
          const currentProgress = 92 + Math.floor((processed / totalGames) * 7)
          onProgress?.(currentProgress)
          
          console.log(`[${processed}/${gamesToProcess.length}] Processando: ${gameId}`)
          
          // Detecta a plataforma e obt√©m nome amig√°vel
          const gameInfo = await this.getGameInfo(gameId)
          
          scannedGames.push({
            name: gameInfo.displayName || gameInfo.name,
            displayName: gameInfo.displayName,
            gameId: gameId,
            platform: gameInfo.platform,
            coverUrl: gameInfo.coverUrl,
            foundSaves: true,
            savesCount: fileCount
          })
          
          console.log(`‚úÖ ${gameInfo.displayName || gameId} (${fileCount} arquivos)`)
        } catch (error) {
          console.error(`‚ö†Ô∏è Erro ao processar ${gameId}:`, error)
          continue
        }
      }

      onProgress?.(99)
      console.log(`‚ú® Escaneamento conclu√≠do: ${scannedGames.length} jogos processados`)
      onProgress?.(100)
      return scannedGames
    } catch (error: any) {
      console.error('‚ùå Falha ao escanear jogos:', error)
      console.error('‚ùå Stack trace:', error.stack)
      console.error('‚ùå Mensagem:', error.message)
      throw error
    }
  }

  /**
   * Cancel ongoing scan
   */
  public static cancelScan(): void {
    console.log('üõë Tentando cancelar scan...')
    // Implementa√ß√£o ser√° feita via IPC
  }

  /**
   * Get list of games from Ludusavi manifest
   */
  private static async getManifestGames(): Promise<string[]> {
    // Popular games that are likely to be installed
    return [
      'The Witcher 3',
      'Cyberpunk 2077',
      'Stardew Valley',
      'Terraria',
      'Minecraft',
      'Dark Souls III',
      'Elden Ring',
      'Skyrim',
      'Fallout 4',
      'GTA V',
      'Red Dead Redemption 2',
      'Hollow Knight',
      'Celeste',
      'Undertale',
      'Hades',
      'Dead Cells',
      'Binding of Isaac',
      'Don\'t Starve Together',
      'Subnautica',
      'No Man\'s Sky',
      'Monster Hunter World',
      'Final Fantasy XIV',
      'Divinity Original Sin 2',
      'Baldur\'s Gate 3',
      'Portal 2',
      'Half-Life 2',
      'Counter-Strike Global Offensive',
      'Dota 2',
      'League of Legends',
      'Valorant',
      'Apex Legends',
      'Fortnite',
      'Rocket League',
      'Among Us',
      'Fall Guys',
      'Valheim',
      'Project Zomboid',
      'RimWorld',
      'Factorio',
      'Satisfactory',
      'Deep Rock Galactic',
      'Left 4 Dead 2',
      'Payday 2',
      'Warframe',
      'Destiny 2',
      'Path of Exile',
      'Diablo III',
      'Borderlands 3',
      'Resident Evil Village'
    ]
  }

  /**
   * Get game information (name, platform, cover) from game ID
   * Suporta Steam ID, GOG ID ou nome direto
   */
  private static async getGameInfo(gameId: string): Promise<{
    name: string
    displayName?: string
    platform: 'steam' | 'gog' | 'epic' | 'custom' | 'unknown'
    coverUrl?: string
  }> {
    // Detecta se √© Steam ID (apenas n√∫meros)
    if (/^\d+$/.test(gameId)) {
      try {
        console.log(`üîç Buscando informa√ß√µes do Steam para ID: ${gameId}`)
        
        // Tenta m√∫ltiplas fontes para obter informa√ß√µes
        const steamInfo = await this.getSteamGameInfo(gameId)
        
        if (steamInfo) {
          console.log(`‚úÖ Encontrado: ${steamInfo.name}`)
          return {
            name: gameId,
            displayName: steamInfo.name,
            platform: 'steam',
            coverUrl: steamInfo.coverUrl
          }
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è N√£o foi poss√≠vel obter dados para Steam ID ${gameId}`)
      }
      
      // Se falhar, retorna com Steam ID mas sem nome
      return {
        name: gameId,
        platform: 'steam',
        coverUrl: `https://cdn.cloudflare.steamstatic.com/steam/apps/${gameId}/header.jpg`
      }
    }
    
    // Se n√£o √© ID num√©rico, assume que √© o nome do jogo
    // Tenta buscar informa√ß√µes mesmo assim
    const searchResult = await this.searchGameByName(gameId)
    
    if (searchResult) {
      return searchResult
    }
    
    return {
      name: gameId,
      displayName: gameId,
      platform: 'unknown',
      coverUrl: `https://via.placeholder.com/460x215/1e1e1e/4CAF50?text=${encodeURIComponent(gameId)}`
    }
  }

  /**
   * Busca informa√ß√µes do jogo na Steam API e √≠cone do SteamGridDB
   */
  private static async getSteamGameInfo(appId: string): Promise<{
    name: string
    coverUrl: string
  } | null> {
    try {
      // Primeira tentativa: Steam Store API para nome do jogo
      const response = await axios.get(
        `https://store.steampowered.com/api/appdetails?appids=${appId}&l=brazilian`,
        { timeout: 5000 }
      )
      
      let gameName = `Steam Game ${appId}`
      
      if (response.data?.[appId]?.success && response.data[appId].data?.name) {
        gameName = response.data[appId].data.name
      }
      
      // Busca √≠cone no SteamGridDB
      const coverUrl = await this.getSteamGridDBIcon(appId, gameName)
      
      return {
        name: gameName,
        coverUrl: coverUrl || `https://cdn.cloudflare.steamstatic.com/steam/apps/${appId}/header.jpg`
      }
    } catch (error) {
      console.error(`Erro ao buscar na Steam API para ${appId}:`, error)
      // Fallback para Steam CDN
      return {
        name: `Steam Game ${appId}`,
        coverUrl: `https://cdn.cloudflare.steamstatic.com/steam/apps/${appId}/header.jpg`
      }
    }
  }

  /**
   * Busca √≠cones do jogo no SteamGridDB
   */
  private static async getSteamGridDBIcon(
    steamId: string,
    gameName?: string
  ): Promise<string | null> {
    try {
      console.log(`üé® Buscando √≠cone no SteamGridDB para Steam ID: ${steamId}`)
      
      // Busca √≠cones para o jogo pelo Steam ID
      const response = await axios.get(
        `${STEAMGRIDDB_BASE_URL}/icons/steam/${steamId}`,
        {
          headers: {
            'Authorization': `Bearer ${STEAMGRIDDB_API_KEY}`
          },
          params: {
            types: 'static', // Apenas imagens est√°ticas
            nsfw: 'false',
            humor: 'false'
          },
          timeout: 5000
        }
      )
      
      if (response.data?.success && response.data.data?.length > 0) {
        // Retorna o primeiro √≠cone encontrado
        const icon = response.data.data[0]
        console.log(`‚úÖ √çcone encontrado no SteamGridDB: ${icon.url}`)
        return icon.url
      }
      
      console.log(`‚ö†Ô∏è Nenhum √≠cone encontrado no SteamGridDB para ${steamId}`)
      return null
    } catch (error: any) {
      console.error(`‚ùå Erro ao buscar √≠cone no SteamGridDB:`, error.message)
      return null
    }
  }
  /**
   * Busca jogo por nome usando Steam API e SteamGridDB
   */
  private static async searchGameByName(gameName: string): Promise<{
    name: string
    displayName: string
    platform: 'steam' | 'gog' | 'epic' | 'custom' | 'unknown'
    coverUrl?: string
  } | null> {
    try {
      console.log(`üîç Buscando jogo por nome: ${gameName}`)
      
      // Primeiro, busca o jogo pelo nome no SteamGridDB
      const steamGridDBResult = await this.searchSteamGridDBByName(gameName)
      
      if (steamGridDBResult) {
        console.log(`‚úÖ Encontrado no SteamGridDB: ${steamGridDBResult.displayName}`)
        return steamGridDBResult
      }
      
      // Fallback: Tenta buscar na Steam Search API
      const searchQuery = encodeURIComponent(gameName)
      const response = await axios.get(
        `https://store.steampowered.com/api/storesearch/?term=${searchQuery}&cc=br&l=brazilian`,
        { timeout: 5000 }
      )
      
      if (response.data?.items?.length > 0) {
        const firstResult = response.data.items[0]
        console.log(`‚úÖ Encontrado na Steam: ${firstResult.name}`)
        
        // Tenta buscar √≠cone no SteamGridDB
        const coverUrl = await this.getSteamGridDBIcon(firstResult.id.toString(), firstResult.name)
        
        return {
          name: gameName,
          displayName: firstResult.name,
          platform: 'steam',
          coverUrl: coverUrl || `https://cdn.cloudflare.steamstatic.com/steam/apps/${firstResult.id}/header.jpg`
        }
      }
      
      return null
    } catch (error) {
      console.error(`Erro ao buscar jogo ${gameName}:`, error)
      return null
    }
  }

  /**
   * Busca jogo por nome no SteamGridDB
   */
  private static async searchSteamGridDBByName(gameName: string): Promise<{
    name: string
    displayName: string
    platform: 'steam' | 'gog' | 'epic' | 'custom' | 'unknown'
    coverUrl?: string
  } | null> {
    try {
      console.log(`üîç Buscando no SteamGridDB: ${gameName}`)
      
      // Busca o jogo pelo nome
      const searchResponse = await axios.get(
        `${STEAMGRIDDB_BASE_URL}/search/autocomplete/${encodeURIComponent(gameName)}`,
        {
          headers: {
            'Authorization': `Bearer ${STEAMGRIDDB_API_KEY}`
          },
          timeout: 5000
        }
      )
      
      if (searchResponse.data?.success && searchResponse.data.data?.length > 0) {
        const firstGame = searchResponse.data.data[0]
        console.log(`üéÆ Jogo encontrado: ${firstGame.name} (ID: ${firstGame.id})`)
        
        // Busca o √≠cone do jogo
        const iconsResponse = await axios.get(
          `${STEAMGRIDDB_BASE_URL}/icons/game/${firstGame.id}`,
          {
            headers: {
              'Authorization': `Bearer ${STEAMGRIDDB_API_KEY}`
            },
            params: {
              types: 'static',
              nsfw: 'false',
              humor: 'false'
            },
            timeout: 5000
          }
        )
        
        let coverUrl: string | undefined
        if (iconsResponse.data?.success && iconsResponse.data.data?.length > 0) {
          coverUrl = iconsResponse.data.data[0].url
          console.log(`üé® √çcone encontrado: ${coverUrl}`)
        }
        
        return {
          name: gameName,
          displayName: firstGame.name,
          platform: 'steam', // SteamGridDB retorna principalmente jogos Steam
          coverUrl
        }
      }
      
      return null
    } catch (error: any) {
      console.error(`‚ùå Erro ao buscar no SteamGridDB:`, error.message)
      return null
    }
  }
}
